openapi: 3.0.2

info:
  title: Microblog API definition.
  version: "0.7.5"

servers:
  - url: https://api.microblog.fi
    description: Microblogi palvelun rajapintakuvaus
  - url: http://localhost:9000
    description: Microblogi testiympäristö

security:
  - mbCookieAuth: []

components:
  responses:
    OK:
      description: OK
    Id:
      description: Id of the deleted item.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Id"
    postId:
      description: Id of the new blog post in json array object.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/idList"
    errorResponse:
      description: Error object.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"
    newUserId:
      description: Reply to user query.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/uuid"
    mediaRes:
      description: Response to media query.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/mediaRes"

  securitySchemes:
    mbCookieAuth:
      type: apiKey
      in: cookie
      name: MBSESSION

  schemas:
    blogPost:
      description: Blog post that hasn't assigned an id.
      type: object
      required:
        - text
        - hashtags
      properties:
        date:
          type: string
          format: date-time
          example: Future date for publishing in ISO 8601 UTC datetime eg. 2024-01-10T10:32:00Z
        text:
          type: string
          example: Blog post main text
        hashtags:
          type: array
          items:
            type: string

    refPost:
      description: Blog post that can be referred with an id.
      type: object
      required:
        - text
        - hashtags
        - id
      properties:
        id:
          description: Blog post id.
          type: integer
        date:
          type: string
          format: date-time
        text:
          type: string
          example: Blog post main text
        hashtags:
          type: array
          items:
            type: string

    userAuth:
      description: User authentication object.
      type: object
      properties:
        userId:
          description: User id
          type: string
        password:
          type: string
        jwt:
          description: Optional serialized authorization data for client.
          type: string

    date:
      type: string
      format: date

    uuid:
      type: string
      format: uuid
      example: d8a935c3-62dd-4315-b4a6-638579214891

    Id:
      description: numerical id.
      type: object
      required:
        - id
      properties:
        id:
          type: integer

    idList:
      description: List of item ids.
      type: object
      required:
        - itemIds
      properties:
        itemIds:
          type: array
          items:
            type: integer

    multipleFiles:
      type: array
      items:
        type: object
        properties:
          imagefile:
            type: string
            format: base64

    newUserObject:
      type: object
      description: Schema to create new user.
      required:
        - userName
        - screenName
        - password
        - email
        - birthday
      properties:
        screenName:
          type: string
        userName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        location:
          type: string
        birthday:
          type: string
          format: date

    userObject:
      type: object
      required:
        - userName
        - email
      properties:
        screenName:
          type: string
        userName:
          type: string
        email:
          type: string
        location:
          type: string
        birthday:
          type: string
          format: date

    userFollow:
      type: object
      description: User following other user or group.
      required:
        - id
        - user_id
        - follows_user
        - follows_group
      properties:
        id:
          type: integer
        user_id:
          type: string
          format: uuid
        follows_user:
          type: string
          format: uuid
        follows_group:
          type: integer

    newFollow:
      type: object
      description: For creating new following
      required:
        - follows_user
        - follows_group
      properties:
        follows_user:
          type: string
          format: uuid
        follows_group:
          type: integer

    userInfo:
      type: object
      required:
        - id
        - username
        - following
        - followers
      properties:
        id:
          type: string
          format: uuid
        userName:
          type: string
        screenName:
          type: string
        profileImage:
          type: number
        description:
          type: string
        following:
          type: array
          items:
            type: object
            description: User following other user or group.
            required:
              - id
              - user_id
              - follows_user
              - follows_group
            properties:
              id:
                type: integer
              user_id:
                type: string
                format: uuid
              follows_user:
                type: string
                format: uuid
              follows_group:
                type: integer

        followers:
          type: array
          items:
            type: object
            description: User following other user or group.
            required:
              - id
              - user_id
              - follows_user
              - follows_group
            properties:
              id:
                type: integer
              user_id:
                type: string
                format: uuid
              follows_user:
                type: string
                format: uuid
              follows_group:
                type: integer

    mediaRes:
      type: array
      items:
        type: object
        properties:
          fileUrl:
            type: string
            description: URL to access the media file.
          mimeType:
            type: string
            description: Mime type string for the media file.
          mediaId:
            type: string
            description: Unique id for media file.
          folderId:
            type: string
            description: The folder media file is related to.

    profileElements:
      type: array
      items:
        type: object
        properties:
          type:
            type: string
            description: Profile element type.
          data:
            type: object
            additionalProperties: true
            description: Profile element data object.

    userProfile:
      type: object
      required:
        - userId
        - atrObj
      properties:
        userId:
          type: string
          description: User uuid
        published:
          type: boolean
          description: Is profile visible to all.

    conversations:
      type: object
      required:
        - participant_1
        - participant_2
      properties:
        participant_1:
          type: string
          description: User uuid
        participant_2:
          type: string
          description: User uuid
        timestamp:
          type: string
          description: date
        conversation_messages:
          type: array
          items:
            type: integer
            description: Array of message ids

    newConversation:
      type: object
      required:
        - participant_1
        - participant_2
      properties:
        participant_1:
          type: string
          description: User uuid
        participant_2:
          type: string
          description: User uuid

    conversation_messages:
      type: object
      required:
        - conversation_id
        - sender_userid
        - message
      properties:
        conversation_id:
          type: integer
          description: conversations id
        sender_userid:
          type: string
          description: User uuid
        message:
          type: string
        timestamp:
          type: string
          description: date
        notification:
          type: boolean
        conversations:
          type: array
          items:
            type: integer
            description: array of conversation ids

    newConversationMessage:
      type: object
      required:
        - conversation_id
        - sender_userid
        - message
      properties:
        conversation_id:
          type: integer
          description: conversations id
        sender_userid:
          type: string
          description: User uuid
        message:
          type: string

    reaction:
      type: object
      required:
        - id
        - type
        - recipient_userid
        - sender_userid
        - read
      properties:
        id:
          type: integer
          description: reaction id
        type:
          type: string
          description: reaction type (like/repost/comment)
        recipient_userid:
          type: string
          description: who received reaction
        sender_userid:
          type: string
          description: who reacted
        media_id:
          type: integer
          description: media target of reaction
        blogpost_id:
          type: integer
          description: post target of reaction

    newReaction:
      type: object
      required:
        - type
        - recipient_userid
        - sender_userid
        - read
      properties:
        type:
          type: string
          description: reaction type (like/repost/comment)
        recipient_userid:
          type: string
          format: uuid
          description: who received reaction
        sender_userid:
          type: string
          format: uuid
          description: who reacted
        media_id:
          type: integer
          description: media target of reaction
        blogpost_id:
          type: integer
          description: post target of reaction

    errorResponse:
      type: object
      properties:
        status:
          type: number
          enum:
            - 400
            - 409
            - 401
            - 500
          description: Status of response.
        err:
          type: array
          items:
            type: object
            properties:
              keyword:
                type: string
                description: Class of error
              message:
                type: string
                description: Description of error

###### TAGS ######

tags:
  - name: blog
    description: Blog post related functions.
  - name: media
    description: User media related functions.
  - name: usertags
    description: Tag-management related functions.
  - name: login
    description: User authentication related functions.
  - name: logout
    description: User session logout related functions.
  - name: group
    description: Groups related functions.
  - name: user
    description: User profile related functions.
  - name: conversation
    description: Direct messaging related functions.
  - name: reaction
    description: Reactions-related functions

paths:
  ###### POSTS ######

  /blog/{userId}:
    x-router-controller: BlogController
    get:
      operationId: getBlogPost
      tags:
        - blog
      summary: Get entries filtered by userId and optionally by date or postId
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
        - in: query
          name: postId
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            $ref: "#/components/schemas/date"
        - in: query
          name: endDate
          schema:
            $ref: "#/components/schemas/date"

      responses:
        "200":
          description: successfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/refPost"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

    post:
      operationId: addBlogPost
      responses:
        "200":
          description: post added and post id returned.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/postId"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

      tags:
        - blog
      summary: Post new post to the user's blog.
      parameters:
        - name: userId
          in: path
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/blogPost"

    delete:
      operationId: deleteBlogPost
      responses:
        "200":
          $ref: "#/components/responses/postId"
        "400":
          $ref: "#/components/responses/errorResponse"

      tags:
        - blog
      summary: Delete one or several blog posts.
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/idList"

  /blog/{userId}/{postId}:
    put:
      operationId: updateBlogPost
      responses:
        "200":
          $ref: "#/components/responses/OK"
      tags:
        - blog
      summary: Update blog post.
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
        - name: postId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/refPost"

  ###### MEDIA ######

  /media/{userId}/{folderId}:
    x-router-controller: mediaController
    post:
      operationId: addUserMedia
      responses:
        "200":
          $ref: "#/components/responses/OK"
      tags:
        - media
      summary: Upload a media files to selected folder.
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string

        - name: folderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Array of multipart/formdata in base64 encoding.
        content:
          multipart/formdata:
            schema:
              $ref: "#/components/schemas/multipleFiles"
            encoding:
              multipleFiles:
                contentType: image/png, image/jpeg

  /media/{userId}:
    get:
      operationId: getUserMedia
      summary: Get list of media files and their location.
      responses:
        "200":
          description: Return a list of available media resources for user.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/mediaRes"
      tags:
        - media
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string

  /media/{userId}/{mediaId}:
    delete:
      operationId: delUserMedia
      summary: Delete refered media file.
      tags:
        - media
      responses:
        "200":
          $ref: "#/components/responses/OK"
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
        - name: mediaId
          required: true
          in: path
          schema:
            type: string

  ###### USER INFORMATION ######

  /user/{userId}:
    get:
      summary: Get logged in user's data.
      operationId: getUser
      tags:
        - user
      responses:
        "200":
          $ref: "#/components/responses/OK"
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string

  /user/{username}/details:
    get:
      summary: Get user's details to show to other users
      operationId: getUserInfo
      tags:
        - user
      responses:
        "200":
          description: Response contains user's detailed information as a JSON object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfo"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      parameters:
        - in: path
          required: true
          name: username
          schema:
            type: string

  ###### PROFILE ELEMENTS ######

  /user/{userId}/profile/elements:
    get:
      operationId: getProfileElements
      summary: Get profile elements.
      tags:
        - user
      responses:
        "200":
          description: Response contains user's profile elements as a JSON array.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profileElements"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
    post:
      operationId: editProfileElements
      summary: Update profile elements.
      tags:
        - user
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/profileElements"

  ###### FOLLOWING ######

  /user/{userId}/following:
    get:
      summary: Get list of users the person is following.
      operationId: getFollowings
      tags:
        - user
      responses:
        "200":
          description: A list of users and followings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/userFollow"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string

    post:
      summary: Add the user's id and a user or a group they are following
      operationId: addFollowing
      tags:
        - user
      responses:
        "200":
          description: Return added user's following
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userFollow"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      parameters:
        - name: userId
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - in: query
          name: followsUser
          schema:
            type: string
            format: uuid
        - in: query
          name: followsGroup
          schema:
            type: string

    delete:
      summary: Delete one user's following item
      operationId: deleteFollowing
      responses:
        "200":
          $ref: "#/components/responses/Id"
        "400":
          $ref: "#/components/responses/errorResponse"
      tags:
        - user
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Id"

  /user/{userId}/followingGroups:
    get:
      summary: Get list of groups the person is following.
      operationId: getGroupFollowings
      tags:
        - user
      responses:
        "200":
          description: A list of objects; users and followings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/userFollow"
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string

  /user/{userId}/followers:
    get:
      summary: Get list of user's followers.
      operationId: getFollowers
      tags:
        - user
      responses:
        "200":
          description: A list of objects; followers the user has
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/userFollow"
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string

  ###### USER CREATION & AUTHENTICATION ######

  /user/register:
    post:
      operationId: registerUser
      summary: Send user's registration data.
      tags:
        - user
      responses:
        "200":
          description: The registered user's id
          content:
            text/plain:
              schema:
                type: string
              example: "a4cbcc87-33a8-4e95-bb97-6afa767e107b"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newUserObject"

  /login:
    post:
      summary: Login using user's credentials.
      operationId: "loginUser"
      tags:
        - login
      responses:
        "200":
          description: The logged in user's id
          content:
            text/plain:
              schema:
                type: string
              example: "a4cbcc87-33a8-4e95-bb97-6afa767e107b"
        "401":
          $ref: "#/components/responses/errorResponse"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userAuth"
  /logout:
    get:
      summary: Logout user and destroy the session.
      operationId: "logoutUser"
      tags:
        - logout
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "500":
          $ref: "#/components/responses/errorResponse"

  ###### CONVERSATIONS ######

  /user/{userId}/conversations:
    get:
      summary: Get list of user's active conversations.
      operationId: getConversations
      tags:
        - user
        - conversation
      responses:
        "200":
          description: A list of the user's active conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/conversations"
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string

  /conversation:
    post:
      summary: Start new conversation
      operationId: createConversation
      tags:
        - conversation
      responses:
        "200":
          description: The information of the newly-created conversation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/conversations"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newConversation"

  /conversation/{conversationId}:
    get:
      summary: Get conversation by id.
      operationId: getConversationDetails
      tags:
        - conversation
      responses:
        "200":
          description: Details of conversation by id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/conversations"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      parameters:
        - name: conversationId
          required: true
          in: path
          schema:
            type: string

    post:
      summary: Add a new message to the conversation
      operationId: sendDirectMessage
      tags:
        - conversation
      responses:
        "201":
          description: Return updated message list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversation_messages"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      parameters:
        - name: conversationId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newConversationMessage"

    delete:
      summary: Delete conversation by ID
      operationId: deleteConversation
      responses:
        "200":
          $ref: "#/components/responses/Id"
        "400":
          $ref: "#/components/responses/errorResponse"
      tags:
        - conversation
      parameters:
        - name: conversationId
          in: path
          schema:
            type: string
          required: true

  /conversation/{conversationId}/messages:
    get:
      summary: Get messages by conversation id.
      operationId: getConversationMessages
      tags:
        - conversation
      responses:
        "200":
          description: Messages matching the conversation Id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/conversation_messages"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      parameters:
        - name: conversationId
          required: true
          in: path
          schema:
            type: string

  /conversation/{conversationId}/{messageId}:
    put:
      summary: Edit message in a conversation
      operationId: editDirectMessage
      tags:
        - conversation
      responses:
        "201":
          description: Return updated message list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversation_messages"
        "400":
          description: Error object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
      parameters:
        - name: conversationId
          in: path
          schema:
            type: string
          required: true
        - name: messageId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string

    delete:
      summary: Delete message by ID
      operationId: deleteDirectMessage
      responses:
        "200":
          $ref: "#/components/responses/Id"
        "400":
          $ref: "#/components/responses/errorResponse"
      tags:
        - conversation
      parameters:
        - name: conversationId
          in: path
          schema:
            type: string
          required: true
        - name: messageId
          in: path
          schema:
            type: string
          required: true

  ###### REACTIONS ######
  /blog/{postId}/reactions:
    post:
      operationId: addPostReaction
      summary: add new reaction on a post
      tags:
        - blog
        - reaction
      responses:
        "200":
          description: Return the new reaction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reaction"
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newReaction"
    get:
      operationId: getPostReactions
      summary: get list of reactions on a post
      tags:
        - blog
        - reaction
      responses:
        "200":
          description: Return a list of reactions on a post.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reaction"
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: array
            items:
              type: string

  /blog/{postId}/reactions/{reactionId}:
    delete:
      operationId: deletePostReaction
      summary: delete reaction from a post
      tags:
        - blog
        - reaction
      responses:
        "200":
          description: Return deleted reaction details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reaction"
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: path
          name: reactionId
          required: true
          schema:
            type: string

  /user/{userId}/notifications:
    get:
      operationId: getUserNotifications
      summary: get list of reactions a user has received across all their posts
      tags:
        - user
        - reaction
      responses:
        "200":
          description: Return a list of reactions a user has received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reaction"
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: unread
          required: false
          schema:
            type: boolean
        - in: query
          name: type
          required: false
          schema:
            type: array
            items:
              type: string

  /user/{userId}/notifications/{reactionId}:
    put:
      operationId: handleReactionReadStatus
      summary: Change the read status of a reaction a user has received
      tags:
        - user
        - reaction
      responses:
        "200":
          description: Return the affected reactions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reaction"
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: reactionId
          required: true
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - in: query
          name: readStatus
          required: true
          schema:
            type: string
