generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blog_posts {
  id              Int               @id @default(autoincrement())
  user_id         String?           @db.Uuid
  blog_text       String?
  timestamp       DateTime?         @db.Timestamp(6)
  users           users?            @relation(fields: [user_id], references: [uid], onDelete: Cascade, onUpdate: NoAction)
  item_properties item_properties[]
  likes           likes[]
  post_medias     post_medias[]
}

model contacts {
  id           Int       @id @default(autoincrement())
  user_id      String    @db.Uuid
  sender_name  String?   @db.VarChar
  header       String?
  message      String?
  email        String?   @db.VarChar
  timestamp    DateTime? @db.Timestamp(6)
  notification Boolean?
  users        users     @relation(fields: [user_id], references: [uid], onDelete: Cascade, onUpdate: NoAction)
}

model contexts {
  id              Int               @id @default(autoincrement())
  title           String?           @db.VarChar(50)
  item_properties item_properties[]
}

model conversation_messages {
  id              Int            @id @default(autoincrement())
  conversation_id Int?
  sender_userid   String?         @db.Uuid
  message         String?
  timestamp       DateTime?      @db.Timestamp(6)
  notification    Boolean?
  conversations   conversations? @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model conversations {
  id                                       Int                     @id @default(autoincrement())
  participant_1                            String?                 @db.Uuid
  participant_2                            String?                 @db.Uuid
  header                                   String?
  timestamp                                DateTime?               @db.Timestamp(6)
  conversation_messages                    conversation_messages[]
  users_conversations_participant_1Tousers users?                  @relation("conversations_participant_1Tousers", fields: [participant_1], references: [uid], onDelete: Cascade, onUpdate: NoAction)
  users_conversations_participant_2Tousers users?                  @relation("conversations_participant_2Tousers", fields: [participant_2], references: [uid], onDelete: Cascade, onUpdate: NoAction)
}

model element_types {
  id               Int                @id @default(autoincrement())
  name             String?
  profile_elements profile_elements[]
}

model foldermedia {
  id          Int          @id @default(autoincrement())
  folder_id   Int?
  media_id    Int?
  folders     folders?     @relation(fields: [folder_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_medias user_medias? @relation(fields: [media_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model folders {
  id            Int            @id @default(autoincrement())
  profile_id    String?        @db.Uuid
  folder_name   String?        @db.VarChar
  foldermedia   foldermedia[]
  user_profiles user_profiles? @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model followings {
  id                                   Int     @id @default(autoincrement())
  user_id                              String? @db.Uuid
  follows_user                         String? @db.Uuid
  follows_group                        Int?
  groups                               groups? @relation(fields: [follows_group], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_followings_follows_userTousers users?  @relation("followings_follows_userTousers", fields: [follows_user], references: [uid], onDelete: Cascade, onUpdate: NoAction)
  users_followings_user_idTousers      users?  @relation("followings_user_idTousers", fields: [user_id], references: [uid], onDelete: Cascade, onUpdate: NoAction)
}

model groupmembers {
  id        Int       @id @default(autoincrement())
  group_id  Int?
  member_id String?   @db.Uuid
  admin     Boolean?
  joined    DateTime? @db.Timestamp(6)
  groups    groups?   @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users?    @relation(fields: [member_id], references: [uid], onDelete: Cascade, onUpdate: NoAction)
}

model groups {
  id           Int            @id @default(autoincrement())
  name         String?        @unique @db.VarChar(40)
  owner_uuid   String?        @db.Uuid
  created_at   DateTime?      @db.Timestamp(6)
  followings   followings[]
  groupmembers groupmembers[]
  users        users?         @relation(fields: [owner_uuid], references: [uid], onDelete: Restrict, onUpdate: NoAction)
}

model invitations {
  id          Int       @id @default(autoincrement())
  meeting_id  String?   @db.Uuid
  participant String?   @db.VarChar(50)
  message     String?
  email       String?   @db.VarChar(50)
  meetings    meetings? @relation(fields: [meeting_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model item_properties {
  id              Int            @id @default(autoincrement())
  creator_user_id String?        @db.Uuid
  media_id        Int?
  blogpost_id     Int?
  profile_id      String?        @db.Uuid
  key             String?        @db.VarChar(45)
  value           String
  context_id      Int?
  time            DateTime?      @db.Timestamp(6)
  blog_posts      blog_posts?    @relation(fields: [blogpost_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  contexts        contexts?      @relation(fields: [context_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users?         @relation(fields: [creator_user_id], references: [uid], onDelete: Cascade, onUpdate: NoAction)
  user_medias     user_medias?   @relation(fields: [media_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_profiles   user_profiles? @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model likes {
  id              Int          @id @default(autoincrement())
  creator_user_id String       @db.Uuid
  media_id        Int?
  blogpost_id     Int?
  blog_posts      blog_posts?  @relation(fields: [blogpost_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users        @relation(fields: [creator_user_id], references: [uid], onDelete: Cascade, onUpdate: NoAction)
  user_medias     user_medias? @relation(fields: [media_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@unique(name: "creator_media", [creator_user_id, media_id])
  @@unique(name: "creator_post", [creator_user_id, blogpost_id])
}

model meetings {
  id           String        @id @db.Uuid
  user_uuid    String        @db.Uuid
  start        DateTime?     @db.Timestamp(6)
  end          DateTime?     @db.Timestamp(6)
  notification Boolean?
  invitations  invitations[]
  users        users         @relation(fields: [user_uuid], references: [uid], onDelete: Cascade, onUpdate: NoAction)
}

model post_medias {
  id          Int          @id @default(autoincrement())
  blogpost_id Int?
  media_id    Int?
  blog_posts  blog_posts?  @relation(fields: [blogpost_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_medias user_medias? @relation(fields: [media_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model profile_elements {
  id            Int            @id @default(autoincrement())
  profile_id    String?        @db.Uuid
  type_id       Int?
  media_id      Int?
  gallery_id    Int?
  post_id       Int?
  text_value    String?
  user_profiles user_profiles? @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  element_types element_types? @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model social_links {
  id            Int            @id @default(autoincrement())
  profile_id    String?        @db.Uuid
  link          String?
  user_profiles user_profiles? @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_medias {
  id                                                       Int               @id @default(autoincrement())
  filename                                                 String?           @db.VarChar(40)
  path                                                     String?           @db.VarChar(40)
  user_id                                                  String?           @db.Uuid
  foldermedia                                              foldermedia[]
  item_properties                                          item_properties[]
  likes                                                    likes[]
  post_medias                                              post_medias[]
  users                                                    users?            @relation(fields: [user_id], references: [uid], onDelete: Cascade, onUpdate: NoAction)
  user_profiles_user_profiles_header_media_idTouser_medias user_profiles[]   @relation("user_profiles_header_media_idTouser_medias")
  user_profiles_user_profiles_profile_imageTouser_medias   user_profiles[]   @relation("user_profiles_profile_imageTouser_medias")
}

model user_profiles {
  id                                                     String             @id @db.Uuid
  user_id                                                String            @unique @db.Uuid
  screen_name                                            String?
  profile_image                                          Int?
  profile_text                                           String?
  header_media_id                                        Int?
  homepage                                               String?
  folders                                                folders[]
  item_properties                                        item_properties[]
  profile_elements                                       profile_elements[]
  social_links                                           social_links[]
  user_medias_user_profiles_header_media_idTouser_medias user_medias?       @relation("user_profiles_header_media_idTouser_medias", fields: [header_media_id], references: [id], onUpdate: NoAction)
  user_medias_user_profiles_profile_imageTouser_medias   user_medias?       @relation("user_profiles_profile_imageTouser_medias", fields: [profile_image], references: [id], onUpdate: NoAction)
  users                                                  users?             @relation(fields: [user_id], references: [uid], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  uid                                              String            @id @db.Uuid
  username                                         String            @unique @db.VarChar(50)
  password                                         String            @db.VarChar
  email                                            String?           @db.VarChar(50)
  admin                                            Boolean?
  location                                         String?
  birthday                                         DateTime?         @db.Date
  joined                                           DateTime?         @db.Timestamp(6)
  timezone                                         String?           @db.VarChar
  last_login                                       DateTime?         @db.Timestamp(6)
  blog_posts                                       blog_posts[]
  contacts                                         contacts[]
  conversations_conversations_participant_1Tousers conversations[]   @relation("conversations_participant_1Tousers")
  conversations_conversations_participant_2Tousers conversations[]   @relation("conversations_participant_2Tousers")
  followings_followings_follows_userTousers        followings[]      @relation("followings_follows_userTousers")
  followings_followings_user_idTousers             followings[]      @relation("followings_user_idTousers")
  groupmembers                                     groupmembers[]
  groups                                           groups[]
  item_properties                                  item_properties[]
  likes                                            likes[]
  meetings                                         meetings[]
  user_medias                                      user_medias[]
  user_profiles                                    user_profiles[]
}
